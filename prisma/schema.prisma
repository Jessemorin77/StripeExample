// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//datasource db {
//  provider = "postgresql"
//  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
//}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chatParticipants ChatParticipant[]
  messages Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chat {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  participants ChatParticipant[]
  messages    Message[]
}

model ChatParticipant {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat     Chat     @relation(fields: [chatId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  userId    String?
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}


model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

model Property {
  id      String   @id @default(cuid())
  Address String
  City    String
  State   String
  Zip     Int
  Beds    Int
  Baths   Int
  Sqft    Int
  Type    String
  Status  String
  Image   String
  Desc    String
  listings Listing[]
}

model Listing {
  id             String   @id @default(cuid())
  propertyId     String
  property       Property @relation(fields: [propertyId], references: [id])
  jobType        String
  contractorType String
  readyToHire    Boolean
  startDate      DateTime
  endDate        DateTime
  title          String
  description    String
  budget         Int
  bids           Bid[]
  jobs           Job[]
}


model Bid {
  id         String   @id @default(cuid())
  userId     String   // Foreign key referencing UserProfile discordId
  listingId  String
  listing    Listing? @relation(fields: [listingId], references: [id])
  bidAmount  Int?
  bidMessage String?
  bidStatus  String?
  bidDate    DateTime @default(now())
  job        Job[]
}

model Job {
  id        String   @id @default(cuid())
  userId    String   // Foreign key referencing UserProfile discordId
  listingId String
  listing   Listing? @relation(fields: [listingId], references: [id])
  bidId     String
  bid       Bid?     @relation(fields: [bidId], references: [id])
  jobAmount Int?
  jobStatus String?
  jobDate   DateTime @default(now())
}

//
//model StripeEvent {
//    id               String   @id @unique
//    api_version      String?
//    data             Json
//    request          Json?
//    type             String
//    object           String
//    account          String?
//    created          DateTime
//    livemode         Boolean
//    pending_webhooks Int
//}

